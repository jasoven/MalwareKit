#include <iostream>
#include <time.h>
using namespace std;
#define _CRT_SECURE_NO_WARNINGS

int WAIT = 1;
int TIME = 17;
int COUNT = 3;
int temp_count = 0;
const int TIMEARRAY[] = {15, 16, 17};

bool isInTimeArray(int time){
	int size = (sizeof(TIMEARRAY) / sizeof(*TIMEARRAY));
	for (int i = 0; i < size; i++){
		if (TIMEARRAY[i] == time){
			return true;
		}
	}
	return false;
}

bool waitForTime(){
	struct tm * now;
	bool fail = false;
	do{
		if (fail)	return false;
		//get time
		time_t t = time(0);
		now = localtime(&t);
		//if times do not match and action count has been reached reset count
		if (!isInTimeArray(now->tm_hour) && temp_count != 0){
			temp_count = 0;
		}
		//return false if the loop goes back to the top
		fail = true;
		//do while the hour is not what we want
	} while (!isInTimeArray(now->tm_hour) || temp_count == COUNT);

	//do an action
	if (isInTimeArray(now->tm_hour) && temp_count <= COUNT){
		temp_count++;
	}
	return true;
}

bool waitForPeriod(){
	cout << "waiting " << WAIT << " hours";
	time_t t = time(0) + (WAIT * 60 * 60);
	while (time(0) < t){}
	return true;
}

int main(){
	while (1){
		if (waitForTime()){
			cout << " it is that time " << endl;
		}
		else{
			cout << " it is not that time " << endl;
		}
	}
	while (1){
		waitForTime();
		//bot stuff
		waitForPeriod();
	}
	return 0;
}