import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'malware_toolkit_project.settings')

import django
django.setup()

from malware_toolkit.models import Feature, Function, Import, Header, \
    Definition, Definition_Lines
from django.core.exceptions import ObjectDoesNotExist
def add_feature():
    f = Feature.objects.get_or_create(feature_id=feat, name=name)[0]
    f.name=name
    # add_function(feat, feat.function)
    f.save()
    return f

# TODO - add exception handling
def add_new_function(func):
    print(func['name'])
    print(func['import'])
    print(func['declaration'])
    print(func['definition'])
    f = Function.objects.get_or_create(name=func['name'])[0]
    add_new_import(f, func['import'])
    add_new_header(f, func['declaration'])
    add_new_definition(f, func['definition'])

def add_new_import(funcObj, i_lines):
    line_counter = 0
    i = Import.objects.all().filter(function=funcObj)
    print(type(i))
    for l in i_lines:
        if line_counter < len(i):
            i[line_counter].text = l
            i[line_counter].save()
        else:
            i = Import.objects.get_or_create(function=funcObj, \
                text=l, line_number=line_counter)[0]
            i.save()
        line_counter += 1
    while line_counter < len(i):
        i[line_counter].delete()
        line_counter += 1

def add_new_header(funcObj, h_line):
    h = Header.objects.get_or_create(function=funcObj, line_number=0)[0]
    h.text = h_line[0]
    h.save()

def add_new_definition(funcObj, d_lines):
    definition = Definition.objects.get_or_create(function=funcObj)[0]
    line_counter = 0
    d = Definition_Lines.objects.all().filter(definition=definition)
    for l in d_lines:
        # if the current line number is still less than what was already in the db
        if line_counter < len(d):
            d[line_counter].text = l
            d[line_counter].save()
        else:
            Definition_Lines.objects.get_or_create( \
                definition=definition, \
                text=l, line_number=line_counter)[0]
        line_counter += 1
    while line_counter < len(d):
        d[line_counter].delete()
        line_counter += 1

# func - String name of the function
# returns a QuerySet of models.Import object tied to the given function
# returns None if nothing was found or error encountered
def get_function_imports(func):
    i = None
    try:
        # get the function id (foreign key)
        # based on the function name passed in
        func_id = Function.objects.get(name=func)
        # use function_id to query for the import objects
        i = Import.objects.all().filter(function=func_id)
    except ObjectDoesNotExist as e:
        print("function '" + func + "' does not exist")
    return i

# func - String name of the function
# returns a QuerySet of models.Header object tied to the given function
# returns None if nothing was found or error encountered
def get_function_header(func):
    h = None
    try:
        # get the function id (foreign key)
        # based on the function name passed in
        func_id = Function.objects.get(name=func)
        # use function_id to query for the import objects
        h = Header.objects.all().filter(function=func_id)
    except ObjectDoesNotExist as e:
        print("function '" + func + "' does not exist")
    return h

# func - String name of the function
# returns a QuerySet of models.Definition_Lines object tied to the given function
# returns None if nothing was found or error encountered
def get_function_definition(func):
    d_lines = None
    try:
        # get the function id (foreign key)
        # based on the function name passed in
        func_id = Function.objects.get(name=func)
        # use function_id to query for the import objects
        d = Definition.objects.all().filter(function=func_id)
        d_lines = Definition_Lines.objects.all().filter(definition=d)
    except ObjectDoesNotExist as e:
        print("function '" + func + "' does not exist")
    return d_lines
