import MalwareFeatures
import os

class SourceCode:
    'Class for source code'

    def __init__(self):
        # self.id = generateBotID()
        # list of imports this program will use
        self.imports = []
        # list of function declarations
        self.func_decls = []
        # list of function definitions
        self.func_defs = []
        # list of global variable strings
        self.global_vars = []
        # list of lines in the main body of the source code
        self.main = []

    # adds a function declaration
    # declarationa - a function declaration
    def add_func_imports(self, imports):
        # its a list so add each line independently
        if isinstance(imports, list):
            for line in imports:
                self.imports.append(line)
        # its just a single line so add it
        else:
            self.imports.append(imports)

    # adds a function declaration
    # declarationa - a function declaration
    def add_func_declaration(self, declaration):
        # its a list so add each line independently
        if isinstance(declaration, list):
            for line in declaration:
                self.func_decls.append(line)
        # its just a single line so add it
        else:
            self.func_decls.append(declaration)

    # adds a function definition
    # definitions - a function's source code
    def add_func_definition(self, definition):
        # its a list so add each line independently
        if isinstance(definition, list):
            for line in definition:
                self.func_defs.append(line)
        # its just a single line so add it
        else:
            self.func_defs.append(definition)

    # adds a global variable to the source code
    def add_global_variable(self, g_var):
        # its a list so add each line independently
        if isinstance(g_var, list):
            for line in g_var:
                self.global_vars.append(line)
        # its just a single line so add it
        else:
            self.global_vars.append(g_var)

    # adds the function call to main()
    # main - lines of code that need to go in the body of main
    def add_line_to_main(self, main):
        # its a list so add each line independently
        if isinstance(main, list):
            for line in main:
                self.main.append(line)
        # its just a single line so add it
        else:
            self.main.append(line)

    # prepares a source code for a .cpp file for compiling
    def export_code(self, filename):
        source_file = open(filename, 'w')

        # write imports to file
        # source_file.write('#include <iostream>\n')
        for i in self.imports:
            source_file.write(i + '\n')
        source_file.write('\n')

        # write function headers to file
        for d in self.func_decls:
            source_file.write(d + '\n')
        source_file.write('\n')

        # write global variable declarations to file
        # every sample needs a Bot ID
        # self.add_global_variable('char *BOT_ID = \"' + self.id + '\";')
        for v in self.global_vars:
            source_file.write(v + '\n')
        source_file.write('\n')

        # specify the std namespace
        source_file.write("using namespace std;\n\n")

        # write the main function to file
        source_file.write('int main(){\n')
        for m in self.main:
            source_file.write(m + '\n')
        source_file.write('}\n\n')

        # write function definitions to file
        for d in self.func_defs:
            source_file.write(d + '\n')
        source_file.close()

    # clears all variables arrays for the next build
    def clearState(self):
        # clear all but imports since that one is hard coded right now
        del self.imports[:]
        del self.func_decls[:]
        del self.func_defs[:]
        del self.global_vars[:]
        del self.main[:]
