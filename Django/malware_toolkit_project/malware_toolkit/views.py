from django.shortcuts import render
from django.http import HttpResponse
from django.utils import datastructures
from malware_toolkit.models import Feature, Function, \
    Global_Variables, Import, Header, Definition, Body
from malware_toolkit.forms import FeatureForm
import json
import DAO
import re

# Create your views here.
def index(request):

    # Construct a dictionary to pass to the template engine as its context.
    # Note the key boldmessage is the same as {{ boldmessage }} in the template!
    context_dict = {'boldmessage': "I am bold font from the context",
                    'message1': "this is a message"}

    # Return a rendered response to send to the client.
    # We make use of the shortcut function to make our lives easier.
    # Note that the first parameter is the template we wish to use.

    return render(request, 'malware_toolkit/index.html', context_dict)

def features(request):
    features = Feature.objects.all()
    functions = Function.objects.all()
    funcArray = []
    for f in functions:
        func = {}
        func['name'] = f.name
        func['header'] = DAO.get_records_from_table(Header, 'function', f.name)[0].text
        funcArray.append(func)
    context_dict = {'features': features,
                    'functions': funcArray,
                    'title': "Malware Features",
                    }

    return render(request, 'malware_toolkit/features.html', context_dict)

def functions(request):
    functions = Function.objects.all()
    context_dict = {'functions': functions,
                    'title': "Malware Functions",
                    }

    return render(request, 'malware_toolkit/functions.html', context_dict)

def toolkit(request):
    context_dict = {'title': "TaaSera Malware Toolkit",
                    }

    return render(request, 'malware_toolkit/toolkit.html', context_dict)

def add_function(request):
    if request.method == "POST":
        postData = re.split(r'b\'\{\"(.+|\[+|\]+)\"\]\}', str(request.body))[1]
        jsonData = '{\"' + postData + "\"]}"
        func = json.loads(jsonData)
        funcObj = {}
        funcObj['name'] = func['name']
        funcObj['globals'] = func['global']
        funcObj['import'] = func['import']
        funcObj['declaration'] = func['declaration']
        funcObj['definition'] = func['definition']

        DAO.add_new_function(funcObj)

    return HttpResponse(200)

def add_feature(request):
    if request.method == "POST":
        postData = re.split(r'b\'\{\"(.+|\[+|\]+)\"\}', str(request.body))[1]
        jsonData = '{\"' + postData + "\"}"
        print(jsonData)
        feat = json.loads(jsonData)
        featObj = {}
        featObj['name'] = feat['name']
        featObj['body'] = feat['body']
        featObj['priority'] = feat['priority']
        featObj['type'] = feat['type']

        DAO.add_new_feature(featObj)

    return HttpResponse(200)

def get_imports(request):
    try:
        func = request.GET['name']
    except datastructures.MultiValueDictKeyError as e:
        return HttpResponse(400)

    imports = DAO.get_function_imports(func)
    parsed_i = []
    if(imports != None):
        for i in imports:
            parsed_i.append(i.text)
    return HttpResponse(json.dumps(parsed_i))

def get_function(request):
    if request.method == "DELETE":
        postData = re.split(r'b\'\{\"(.+|\[+|\]+)\"\}', str(request.body))[1]
        jsonData = '{\"' + postData + "\"}"
        func = json.loads(jsonData)
        DAO.delete_function(func['name'])
        return HttpResponse(200)
    else:
        try:
            func = request.GET['name']
        except datastructures.MultiValueDictKeyError as e:
            return HttpResponse(400)

        global_vars = DAO.get_records_from_table(Global_Variables, 'function', func)
        imports = DAO.get_records_from_table(Import, 'function', func)
        header = DAO.get_records_from_table(Header, 'function', func)
        definition = DAO.get_records_from_table(Definition, 'function', func)
        parsed_g = make_array(global_vars)
        parsed_i = make_array(imports)
        parsed_h = make_array(header)
        parsed_d = make_array(definition)

        funcObj = {}
        funcObj['globals'] = parsed_g
        funcObj['imports'] = parsed_i
        funcObj['header'] = parsed_h
        funcObj['definition'] = parsed_d

        return HttpResponse(json.dumps(funcObj))

def get_feature(request):
    if request.method == "DELETE":
        postData = re.split(r'b\'\{\"(.+|\[+|\]+)\"\}', str(request.body))[1]
        jsonData = '{\"' + postData + "\"}"
        feat = json.loads(jsonData)
        DAO.delete_record_by_name(Feature, feat['name'])
        return HttpResponse(200)
    elif request.method == "GET":
        try:
            feat = request.GET['name']
        except datastructures.MultiValueDictKeyError as e:
            return HttpResponse(400)

        print("feat is " + feat)
        feat = Feature.objects.get(name=feat)
        body = DAO.get_records_from_table(Body, 'feature', feat)
        parsed_b = make_array(body)

        print(feat.priority)
        featObj = {}
        featObj['priority'] = feat.priority
        featObj['type'] = feat.feature_type
        featObj['body'] = parsed_b

        return HttpResponse(json.dumps(featObj))

def make_array(qSet):
    array = []
    if(qSet != None):
        for s in qSet:
            array.append(s.text)
    return array
